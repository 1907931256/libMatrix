#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>

#define IN_STACK	0
#define	IN_HEAP		1

//------------------------------
//	OPTION when initializing
//------------------------------
#define OPTION_IDENTITY	0x01		// initializing as identity matrix
#define	OPTION_ZEROMAT		0x02	// initializing as zero		matrix

struct matrixHeader_st
{
	//---------------------------------------------------------------------
	//	COMMON ATTRIBUTE FOR BOTH STATIC/DYNAMIC/attribute dimension matrix
	//	for controlling dimension information
	//---------------------------------------------------------------------
	int		matId;			// use to identify specific object , if needed.
	size_t	m;
	size_t	n;
	//char	isStatic;
	//size_t	elemSize;	// double is valid so far.
};
typedef matrixHeader_st		MATRIX_HEADER;

struct matrix_st
{
	//---------------------------------
	//	generic type used to casting up
	//---------------------------------
	MATRIX_HEADER	attr;		
	void*			body;
};

typedef	matrix_st			MATRIX;				// the abstrct class of matrix/vector


int		matInitialize(MATRIX*);		// intializing matrix according to unique type-id
//void	matFinalize(MATRIX*);		// no dynamic matrix avaliable

//----------------------------------------------------------------------
//	Accessing Element , return values are error code for every functions
//----------------------------------------------------------------------
int		matGetElement	(MATRIX*	,const size_t	row,const size_t	column,double*	value);
int		matGetSubmatrix	(MATRIX*	,const size_t	row,const size_t	column,MATRIX*	submatrix);
int		matSetElement	(MATRIX*	,const size_t	row,const size_t	column,const double value);
int		matSetAll		(MATRIX*	,const double value);			// matrix magnitude

int		matScalarMultiply	(const MATRIX left,const double	scalar		,MATRIX*	result);
int		matMultiply			(const MATRIX left,const MATRIX right		,MATRIX*	result);
int		matAdd				(const MATRIX operand1,const MATRIX	operand2,MATRIX*	result);
int		matDotProduct		(const MATRIX left,const MATRIX right,double*	result);
int		matNorm2			(const MATRIX,double*	norm2);		// norm-2(normFrobenius) , such as vector
//-----------------
//
//	1. all function are passed-by-reference , to save memory and increase efficiency
//		for those arguments prefix by 'const' , means they'r input arguments
//------------------
#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>

#define ELEMTYPE	double			// possible to change type


//------------------------------
//	OPTION when initializing
//------------------------------
#define OPTION_IDENTITY		0x01	// initializing as identity matrix
#define	OPTION_ZEROMAT		0x00	// initializing as zero		matrix

typedef struct	matrixHeader_st	MATRIX_HEADER;
typedef	struct	matrix_st		MATRIX;			// the abstrct class of matrix/vector
typedef	struct	matrix_st	ROW_VECTOR;
typedef struct	matrix_st	COL_VECTOR;

#define _MATRIX( m , n )	struct{MATRIX_HEADER attr;ELEMTYPE body[m][n];}	// template macro to declare matrix object 
#define _ROW_VECTOR( i )		struct{MATRIX_HEADER attr;ELEMTYPE body[i];}	// template macro to declare matrix object 
#define _COL_VECTOR( j )		struct{MATRIX_HEADER attr;ELEMTYPE body[j];}	// template macro to declare matrix object 

struct matrixHeader_st
{
	//---------------------------------------------------------------------
	//	COMMON ATTRIBUTE FOR BOTH STATIC/DYNAMIC/attribute dimension matrix
	//	for controlling dimension information
	//---------------------------------------------------------------------
	int	matId	;
	size_t	_m	;		//	dimension m	, number of rows	, beginning at ONE
	size_t	_n	;		//	dimension n	, number of columns	, beginning at ONE
	ELEMTYPE	*bodyAdr;	// used to recoding body's base address
};

struct matrix_st
{
	//---------------------------------
	//	generic type used to casting up
	//---------------------------------
	MATRIX_HEADER	attr;
	char			body;
};

int		matInitialize	(MATRIX*,const size_t rows,const size_t columns,char option);		// intializing matrix according to unique type-id
int		matIdentity		(MATRIX*);																							// no dynamic matrix avaliable
int		matMarkId		(MATRIX*,const size_t	id);

//----------------------------------------------------------------------
//	Element Accessing, return values are error code for every functions
//----------------------------------------------------------------------
int		matGetElement	(MATRIX*	
						 ,const size_t	row
						 ,const size_t	column
						 ,double*	value);
int		matGetSubmatrix	(MATRIX*	
						 ,const size_t	fr
						 ,const size_t	lr
						 ,const size_t	fc
						 ,const size_t	lc
						 ,MATRIX*	submatrix);
int		matGetRowVector	(MATRIX*,const size_t	row,ROW_VECTOR*);
int		matGetColVector	(MATRIX*,const size_t	column,COL_VECTOR*);

int		matSetElement	(MATRIX*	,const size_t	row,const size_t	column,const double value);
int		matSetAll		(MATRIX*	,const double value);			// matrix magnitude
int		matAssign		(MATRIX*	rhs,MATRIX*	lhs);			// rhp = right-hand side , lhs = rhs

int		matScalarMultiply	(MATRIX* left,const double	scalar		,MATRIX*	result);	//	result = scalar*left
int		matMultiply			(MATRIX* left,const MATRIX*	right		,MATRIX*	result);	//	result = left*right
int		matAdd				(MATRIX* operand1,const MATRIX*	operand2,MATRIX*	result);	//	result = operand1 + operand2
int		matDotProduct		(ROW_VECTOR* rv,COL_VECTOR* cv,double*	scalar);				//	scalar = rv * cv
int		matNorm2			(MATRIX*,double*	norm2);										//	norm-2(normFrobenius) , such as vector